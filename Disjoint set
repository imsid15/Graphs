#include<bits/stdc++.h>
using namespace std;
class disjointset{
    vector<int>rank,parent,size;
    public:
    disjointset(int n){
         rank.resize(n+1,0);
         size.resize(n+1,1);
         parent.resize(n+1); 
         for(int i=0;i<=n;i++){
            parent[i]=i;
         }
    }
    int findupar(int node){
         if(node==parent[node]){
            return node;
         }
         return parent[node]=findupar(parent[node]); 
    }
    void unionbyrank(int u,int v){
        int ulp_u=findupar(u);
        int ulp_v=findupar(v);
        if(ulp_u==ulp_v){
            return;
        }
        if(rank[ulp_u]>rank[ulp_v]){
            parent[ulp_v]=ulp_u;
        }
        else if(rank[ulp_u]<rank[ulp_v]){
            parent[ulp_u]=ulp_v;
        }
        else{
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
    }
    void unionbysize(int u,int v){
        int ulp_u=findupar(u);
        int ulp_v=findupar(v);
        if(ulp_u==ulp_v){
            return;
        }
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=ulp_u;
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=ulp_v;
        }
    }
}; 
int main(){

    return 0;
}

//https://practice.geeksforgeeks.org/problems/connecting-the-graph/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=connecting-the-graph
class disjointset{
    public:
    vector<int>rank,parent,size;
    disjointset(int n){
         rank.resize(n+1,0);
         size.resize(n+1,1);
         parent.resize(n+1); 
         for(int i=0;i<=n;i++){
            parent[i]=i;
         }
    }
    int findupar(int node){
         if(node==parent[node]){
            return node;
         }
         return parent[node]=findupar(parent[node]); 
    }
    void unionbyrank(int u,int v){
        int ulp_u=findupar(u);
        int ulp_v=findupar(v);
        if(ulp_u==ulp_v){
            return;
        }
        if(rank[ulp_u]>rank[ulp_v]){
            parent[ulp_v]=ulp_u;
        }
        else if(rank[ulp_u]<rank[ulp_v]){
            parent[ulp_u]=ulp_v;
        }
        else{
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
    }
    void unionbysize(int u,int v,int &cnt){
        int ulp_u=findupar(u);
        int ulp_v=findupar(v);
        if(ulp_u==ulp_v){
            cnt++;
            return;
        }
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=ulp_u;
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=ulp_v;
        }
    }
}; 
class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        int m=edge.size();
        disjointset ds(n);
        int cnt=0;
       for(int i=0;i<m;i++){
        ds.unionbysize(edge[i][0],edge[i][1],cnt);
       }
       int total=0;
       for(int i=0;i<n;i++){
           if(ds.parent[i]==i){
               total++;
           }
       }
       if(cnt>=total-1)return total-1;
       return -1;
       
    }
};

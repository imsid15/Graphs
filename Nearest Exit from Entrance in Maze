//https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/description/?envType=study-plan-v2&envId=graph-theory
class Solution {
public:
    int solve(vector<vector<char>>& maze, vector<int>& entrance){
        int n=maze.size();
        int m=maze[0].size();
        int a=entrance[0];
        int b=entrance[1];
        int ans=-1;
        vector<vector<int>>vis(n,vector<int>(m,0));
        // priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>pq;
        queue<pair<int,pair<int,int>>>pq;
        vis[entrance[0]][entrance[1]];
        pq.push({0,{entrance[0],entrance[1]}});
        while(!pq.empty()){
            int steps=pq.front().first;
            int row=pq.front().second.first;
            int col=pq.front().second.second;
            // vis[row][col]=1;
            pq.pop();
            if(row==n-1 || col==m-1 || row==0 || col==0){
                if(row!=a || col!=b){
                    return steps;
                }
            }
            if(row+1<n && !vis[row+1][col] && maze[row+1][col]=='.'){
                pq.push({steps+1,{row+1,col}});
                vis[row+1][col]=1;
                // if(row+1==n-1 || col==m-1 || row+1==0 || col==0){
                //     ans=steps;
                //     break;
                // }
            }
            if(row-1>=0 && !vis[row-1][col] && maze[row-1][col]=='.'){
                pq.push({steps+1,{row-1,col}});
                vis[row-1][col]=1;
                // if(row-1==n-1 || col==m-1 || row-1==0 || col==0){
                //     ans=steps;
                //     break;
                // }
            }
            if(col+1<m && !vis[row][col+1] && maze[row][col+1]=='.'){
                pq.push({steps+1,{row,col+1}});
                vis[row][col+1]=1;
                // if(row==n-1 || col+1==m-1 || row==0 || col+1==0){
                //     ans=steps;
                //     break;
                // }
            }
            if(col-1>=0 && !vis[row][col-1] && maze[row][col-1]=='.'){
                pq.push({steps+1,{row,col-1}});
                vis[row][col-1]=1;
                // if(row==n-1 || col-1==m-1 || row==0 || col-1==0){
                //     ans=steps;
                //     break;
                // }
            }
        }
        return -1;
    }
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        return solve(maze,entrance);
    }
};

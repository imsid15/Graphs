//https://leetcode.com/problems/satisfiability-of-equality-equations/description/?envType=study-plan-v2&envId=graph-theory
class disjointset{
    vector<int>rank,parent,size;
    public:
    disjointset(int n){
         size.resize(n+1,1);
         parent.resize(n+1); 
         for(int i=0;i<=n;i++){
            parent[i]=i;
         }
    }
    int findupar(int node){
         if(node==parent[node]){
            return node;
         }
         return parent[node]=findupar(parent[node]); 
    }
    void unionbysize(int u,int v){
        int ulp_u=findupar(u);
        int ulp_v=findupar(v);
        if(ulp_u==ulp_v){
            return;
        }
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=ulp_u;
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=ulp_v;
        }
    }
}; 
class Solution {
public:
    bool equationsPossible(vector<string>& equations) {
        disjointset ds(26);
        for(int i=0;i<equations.size();i++){
            string str=equations[i];
            char x=str[1];
            int y=str[0]-'a';
            int z=str[3]-'a';
            if(x=='!')continue;
            ds.unionbysize(y,z);
        }
        for(int i=0;i<equations.size();i++){
            string s=equations[i];
            char p=s[1];
            int q=s[0]-'a';
            int r=s[3]-'a';
            if(p=='=')continue;
            if(ds.findupar(q)==ds.findupar(r))return false;
        }
        return true;
    }
};

//https://leetcode.com/problems/accounts-merge/description/
class disjointset{
    vector<int>rank,parent,size;
    public:
    disjointset(int n){
         rank.resize(n+1,0);
         size.resize(n+1,1);
         parent.resize(n+1); 
         for(int i=0;i<=n;i++){
            parent[i]=i;
         }
    }
    int findupar(int node){
         if(node==parent[node]){
            return node;
         }
         return parent[node]=findupar(parent[node]); 
    }
    void unionbyrank(int u,int v){
        int ulp_u=findupar(u);
        int ulp_v=findupar(v);
        if(ulp_u==ulp_v){
            return;
        }
        if(rank[ulp_u]>rank[ulp_v]){
            parent[ulp_v]=ulp_u;
        }
        else if(rank[ulp_u]<rank[ulp_v]){
            parent[ulp_u]=ulp_v;
        }
        else{
            parent[ulp_u]=ulp_v;
            rank[ulp_v]++;
        }
    }
    void unionbysize(int u,int v){
        int ulp_u=findupar(u);
        int ulp_v=findupar(v);
        if(ulp_u==ulp_v){
            return;
        }
        if(size[ulp_u]<size[ulp_v]){
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=ulp_u;
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=ulp_v;
        }
    }
}; 
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n=accounts.size();
        disjointset ds(n);
        sort(accounts.begin(),accounts.end());
        unordered_map<string,int>m;
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                string name=accounts[i][j];
                if(m.find(name)==m.end()){
                    m[name]=i;
                }
                else{
                    ds.unionbysize(i,m[name]);
                }
            }
        }
        vector<string>v[n];
        for(auto it:m){
            string mail=it.first;
            int node=ds.findupar(it.second);
            v[node].push_back(mail);
        }
        vector<vector<string>>ans;
        for(int i=0;i<n;i++){
            if(v[i].size()==0)continue;
            sort(v[i].begin(),v[i].end());
            vector<string>temp;
            temp.push_back(accounts[i][0]);
            for(auto it:v[i]){
                temp.push_back(it);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};
